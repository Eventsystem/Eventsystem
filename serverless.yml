service:
  name: BusinessEvents-SubscriptionEngine
  awsKmsKeyArn: ${self:custom.${opt:data-center}.KMS_KEY_ARN}
custom: ${file(./serverless-environment-variables.yml)}
provider:
  name: aws
  runtime: dotnetcore1.0
  stage: v1
  region: ap-southeast-2
  deploymentBucket: pageup-serverless-${opt:data-center}-deploy
  environment:
    DATA_CENTER: ${opt:data-center}
    AUTH_ENDPOINT: ${self:custom.${opt:data-center}.AUTH_ENDPOINT}
    DATA_ENCRYPTION_KEY: ${self:custom.${opt:data-center}.DATA_ENCRYPTION_KEY}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:*"
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "logs:DescribeLogGroups"
        - "logs:DescribeLogStreams"
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:CreateBucket"
        - "s3:PutBucket"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "lambda:CreateAlias"
        - "lambda:Get*"
        - "lambda:Invoke*"
        - "lambda:List*"
        - "lambda:PublishVersion"
        - "lambda:TagResource"
        - "lambda:UntagResource"
        - "lambda:Update*"
      Resource: "arn:aws:lambda:*:*:function:integration*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:*:*:table/BusinessEvent"
        - "arn:aws:dynamodb:*:*:table/BusinessEvent/stream/*"
        - "arn:aws:dynamodb:*:*:table/BusinessEvent/index/*"
    - Effect: "Allow"
      Action:
        - "kinesis:*"
      Resource:
        Fn::GetAtt:
          - BusinessEventStream
          - Arn

package:
  artifact: src/BusinessEvents.SubscriptionEngine.Handlers/bin/release/netcoreapp1.0/publish/deploy-package.zip

functions:
  process-dynamodb-stream:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::ProcessDynamoDbStream
    environment:
      AUTH_CLIENT_ID: ${self:custom.${opt:data-center}.AUTH_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${self:custom.${opt:data-center}.AUTH_CLIENT_SECRET}
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
               - BusinessEventTable
               - StreamArn
          batchSize: 100
          startingPosition: LATEST
          enabled: true
    tags:
      stream: "Glofish"
      service: ${self:service}

  process-kinesis-stream:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::ProcessKinesisStream
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
               - BusinessEventStream
               - Arn
          batchSize: 100
          startingPosition: LATEST
          enabled: true
    tags:
      stream: "Glofish"
      service: ${self:service}

  event-sns-handler:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::EventSnsHandler
    environment:
      KINESIS_STREAM_NAME:
        Ref: "BusinessEventStream"
    tags:
      stream: "Glofish"
      service: ${self:service}

  healthcheck:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::HealthCheck
    events:
      - http:
          path: healthcheck
          method: get
          cors: true
    tags:
      stream: "Glofish"
      service: ${self:service}
#
#  event-get:
#    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::EventGet
#    events:
#      - http:
#          path: events/{messageId}
#          method: get
#          cors: true
#    tags:
#      stream: "Glofish"
#      service: ${self:service}
#
#  events-atom-feed:
#    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::EventsAtomFeed
#    events:
#      - http:
#          path: events/atom/{eventType}/{pointer}/{direction}/{pageSize}
#          method: get
#          cors: true
#    tags:
#      stream: "Glofish"
#      service: ${self:service}

resources:
  Resources: ${file(cloudformation-resources.yml)}
