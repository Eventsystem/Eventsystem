service:
  name: BusinessEvents-SubscriptionEngine
  awsKmsKeyArn: ${self:custom.${opt:data-center}.KMS_KEY_ARN}
custom: ${file(./serverless-environment-variables.yml)}
provider:
  name: aws
  runtime: dotnetcore1.0
  stage: v1
  region: ap-southeast-2
  deploymentBucket: pageup-serverless-${opt:data-center}-deploy
  environment:
    DATA_CENTER: ${opt:data-center}
    AUTH_ENDPOINT: ${self:custom.${opt:data-center}.AUTH_ENDPOINT}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:*"
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "logs:DescribeLogGroups"
        - "logs:DescribeLogStreams"
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:CreateBucket"
        - "s3:PutBucket"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "lambda:CreateAlias"
        - "lambda:Get*"
        - "lambda:Invoke*"
        - "lambda:List*"
        - "lambda:PublishVersion"
        - "lambda:TagResource"
        - "lambda:UntagResource"
        - "lambda:Update*"
      Resource: "arn:aws:lambda:*:*:function:integration*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:*:*:table/BusinessEvents"
        - "arn:aws:dynamodb:*:*:table/BusinessEvents/stream/*"
    - Effect: "Allow"
      Action:
        - "kinesis:*"
      Resource:
        Fn::GetAtt:
          - BusinessEventStream
          - Arn

package:
  artifact: src/BusinessEvents.SubscriptionEngine.Handlers/bin/release/netcoreapp1.0/publish/deploy-package.zip

functions:
  handle:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::Handle
    environment:
      AUTH_CLIENT_ID: ${self:custom.${opt:data-center}.AUTH_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${self:custom.${opt:data-center}.AUTH_CLIENT_SECRET}

  process-dynamodb-stream:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::ProcessDynamoDBStream
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
               - BusinessEventStore
               - StreamArn
          batchSize: 100
          startingPosition: LATEST
          enabled: true

  process-kinesis-stream:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::ProcessKinesisStream
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
               - BusinessEventStream
               - Arn
          batchSize: 100
          startingPosition: LATEST
          enabled: true

  healthcheck:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::HealthCheck
    events:
      - http:
          path: healthcheck
          method: get
          cors: true

  event:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::Event
    events:
      - http:
          path: event
          method: post
          cors: true
    environment:
      KINESIS_STREAM_NAME:
        Ref: "BusinessEventStream"

resources:
  Resources:
    BusinessEventStream:
      Type: 'AWS::Kinesis::Stream'
      Properties:
        Name: business-event-stream
        RetentionPeriodHours: 24
        ShardCount: 1
        Tags:
          - Key: Stream
            Value: Glofish
          - Key: Service
            Value: ${self:service}

    BusinessEventStore:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: BusinessEvents
        AttributeDefinitions:
          - AttributeName: MessageId
            AttributeType: S
          - AttributeName: TransportTimeStamp
            AttributeType: S
        KeySchema:
          - AttributeName: MessageId
            KeyType: HASH
          - AttributeName: TransportTimeStamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
            StreamViewType: NEW_IMAGE
        Tags:
            - Key: Stream
              Value: Glofish
            - Key: Service
              Value: ${self:service}

